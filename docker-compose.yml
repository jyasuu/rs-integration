services:
  broker:
    image: apache/kafka:latest
    container_name: broker
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LISTENERS: PLAINTEXT://localhost:9092,CONTROLLER://localhost:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@localhost:9093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_NUM_PARTITIONS: 3
    network_mode: "host"
    ports:
      - 9092:9092
      - 9093:9093
  loki:
    image: grafana/loki:2.9.2
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
  promtail:
    image: grafana/promtail:2.9.2
    volumes:
      - /var/log:/var/log
    command: -config.file=/etc/promtail/config.yml
  grafana:
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /etc/grafana/provisioning/datasources
        cat <<EOF > /etc/grafana/provisioning/datasources/ds.yaml
        apiVersion: 1
        datasources:
        - name: Loki
          type: loki
          access: proxy 
          orgId: 1
          url: http://loki:3100
          basicAuth: false
          isDefault: true
          version: 1
          editable: false
        EOF
        /run.sh
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
  redis:
    image: 'redis:latest'
    ports:
      - '6379:6379'
  rabbitmq:
    image: 'rabbitmq:latest'
    environment:
      - 'RABBITMQ_DEFAULT_PASS=guest'
      - 'RABBITMQ_DEFAULT_USER=guest'
    ports:
      - '5672:5672'
  postgres:
      image: postgres
      restart: always
      environment:
          POSTGRES_DB: postgres
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          PGDATA: /var/lib/postgresql/data
      volumes:
          - db-data:/var/lib/postgresql/data
      ports:
          - "5432:5432"
  mongo:
    image: mongo
    restart: always
    ports:
        - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
  mongo-express:
    image: mongo-express
    restart: always
    ports:
      - 8081:8081
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: example
      ME_CONFIG_MONGODB_URL: mongodb://root:example@mongo:27017/
      ME_CONFIG_BASICAUTH: false
  memcached:
    image: memcached
    restart: always
    ports:
        - "11211:11211"
        - "12345:12345"
    command:
      - --conn-limit=1024
      - --memory-limit=64
      - --threads=4
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.7.1
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms1g -Xmx1g
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
    volumes:
      - ./init/elasticsearch:/usr/share/elasticsearch/init
      - esdata:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200/_cluster/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      
  # --- Added Kibana Service ---
  kibana:
    image: docker.elastic.co/kibana/kibana:8.7.1 # Use the same version as Elasticsearch
    ports:
      - "5601:5601" # Default Kibana port
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200 # Connect to ES using service name
    depends_on:
      elasticsearch:
        condition: service_healthy # Wait for Elasticsearch to be ready
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5601/api/status"]
      interval: 10s
      timeout: 10s
      retries: 5


#  elasticsearch:
#    image: elasticsearch:9.1.2
#    environment:
#      - discovery.type=single-node
#      - ES_JAVA_OPTS=-Xms1g -Xmx1g
#      - xpack.security.enabled=false
#    ports:
#      - "9200:9200"
#    volumes:
#      - ./init/elasticsearch:/usr/share/elasticsearch/init
#      - /data/elasticsearch:/usr/share/elasticsearch/data
#    # network_mode: "host"
#    healthcheck:
#      test: ["CMD", "curl", "-f", "http://localhost:9200/_cluster/health"]
#      interval: 10s
#      timeout: 5s
#      retries: 5
#  kibana:
#    image: rkibana:9.1.2 # Use the same version as Elasticsearch
#    ports:
#      - "5601:5601" # Default Kibana port
#    environment:
#      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200 # Connect to ES using service name
#      - xpack.security.enabled=false
#    depends_on:
#      elasticsearch:
#        condition: service_healthy # Wait for Elasticsearch to be ready
#    healthcheck:
#      test: ["CMD", "curl", "-f", "http://localhost:5601/api/status"]
#      interval: 10s
#      timeout: 10s
#      retries: 5
      
volumes:
  db-data:
  esdata:
